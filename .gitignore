# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# IDE files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs (but keep training logs)

# Temporary files
*.tmp
*.temp
.tmp/
.temp/

# Project specific

# Model checkpoints (but keep recent ones)
checkpoints/resnet50_epoch_[0-9]*.pth
!checkpoints/resnet50_epoch_[0-9][0-9][0-9].pth  # Keep last checkpoint
!checkpoints/

# Data directories (but keep persistent ones)
data/
datasets/
!datasets/imagenet/  # Keep ImageNet if uploaded
!datasets/

# Results and metrics
results/
metrics/
outputs/
runs/

# Visualization outputs
visualizations/
plots/

# Configuration backups
*.bak
*.backup

# Large files that shouldn't be committed
*.tar.gz
*.zip
*.rar

# Lightning AI specific
.lightning/
lightning_logs/
.lightning_studio/

# TensorBoard logs
tensorboard_logs/

# Weights & Biases logs
wandb/

# MLflow logs
mlruns/

# Neptune logs
.neptune/

# Comet ML logs
comet_logs/

# Training artifacts (but keep essential ones)
artifacts/
!training_logs.md  # Keep main training log
*.pkl
*.pickle

# Cache directories
.cache/
*.cache

# Debug files
debug/
*.debug

# Test outputs
test_outputs/
test_results/

# Documentation builds
docs/build/
docs/html/
docs/pdf/

# Backup files
*.orig
*.rej

# Vim temporary files
*.swp
*.swo
*.swn

# Emacs temporary files
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# SublimeText
*.tmlanguage.cache
*.tmPreferences.cache
*.stTheme.cache
*.sublime-workspace
*.sublime-project

# VSCode
.vscode/
!.vscode/settings.json
!.vscode/tasks.json
!.vscode/launch.json
!.vscode/extensions.json
!.vscode/*.code-snippets

# Local History for Visual Studio Code
.history/

# Windows Installer files
*.cab
*.msi
*.msix
*.msm
*.msp

# Windows shortcuts
*.lnk

# JetBrains IDEs
.idea/
*.iml
*.ipr
*.iws

# NetBeans
nb-configuration.xml
.nb-gradle/

# Visual Studio
.vs/
*.user
*.aps
*.pch
*.vspscc
*_i.c
*_p.c
*.ncb
*.suo
*.tlb
*.tlh
*.tmp_proj
*.tmp
*.vspscc
*.vssscc
.builds
*.pidb
*.vspscc
*.sdf
project.lock.json
project.fragment.lock.json
artifacts/

# Eclipse
.metadata
bin/
tmp/
*.tmp
*.bak
*.swp
*~.nib
local.properties
.settings/
.loadpath
.recommenders
.project
.externalToolBuilders/
*.target
.com.crashlytics.sdk.android.crashlytics.ndk/
.project
.autotools
.factorypath
.buildpath
.target

# Xcode
*.pbxuser
!default.pbxuser
*.mode1v3
!default.mode1v3
*.mode2v3
!default.mode2v3
*.perspectivev3
!default.perspectivev3
xcuserdata/
*.moved-aside
*.xccheckout
*.xcscmblueprint
*.xcuserstate

# Android
*.apk
*.ap_
*.apks
bin/
gen/
.gradle/
local.properties
proguard/
.navigation/
captures/
*.jks
*.keystore

# Gradle
.gradle/
build/

# Maven
target/
pom.xml.tag
pom.xml.releaseBackup
pom.xml.versionsBackup
pom.xml.next
release.properties
dependency-reduced-pom.xml
buildNumber.properties
.mvn/timing.properties
.mvn/wrapper/maven-wrapper.jar

# Node.js (if any frontend components)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.npm

# Ruby (if using any Ruby tools)
.bundle/
.config/
coverage/
InstalledFiles
lib/bundler/man/
pkg/
rdoc/
spec/reports/
test/tmp/
test/version_tmp/
tmp/

# Rust (if using any Rust components)
target/
Cargo.lock

# Go (if using any Go components)
*.exe
*.exe~
*.dll
*.so
*.dylib
*.test
*.out
go.work

# Java (if using any Java components)
*.class
*.jar
*.war
*.ear
*.nar
hs_err_pid*
replay_pid*

# C++ (if using any C++ components)
*.o
*.obj
*.exe
*.out
*.app

# Fortran (if using any Fortran components)
*.mod
*.smod

# R (if using any R components)
.Rhistory
.Rapp.history
.RData
.RDataTmp
.RhistoryTmp
.Rprofile
.Rproj.user/

# MATLAB (if using any MATLAB components)
*.asv
*.mex
*.mexw32
*.mexw64
*.mexmaci64

# SAS (if using any SAS components)
*.sas7bdat
*.sas7bcat
*.sas7bndx
*.sas7bvew
*.sas7bdat
*.sas7bcat
*.sas7bndx
*.sas7bvew

# Stata (if using any Stata components)
*.dta
*.do
*.ado
*.stpr

# Database files
*.db
*.sqlite
*.sqlite3

# Compressed files (but keep some source data)
*.gz
*.bz2
*.xz
*.lzma
*.7z

# Image files (but keep some for documentation)
*.jpg
*.jpeg
*.png
*.gif
*.bmp
*.tiff
*.svg
*.webp
*.ico
!docs/images/
!README_images/
!screenshot/

# Video files
*.mp4
*.avi
*.mov
*.mkv
*.webm

# Audio files
*.mp3
*.wav
*.flac
*.aac

# Documentation
*.pdf
*.doc
*.docx
*.xls
*.xlsx
*.ppt
*.pptx

# Archives
*.tar
*.zip
*.rar
*.7z

# Project specific exclusions
# Keep these important files
!.gitignore
!README.md
!requirements.txt
!setup.py
!pyproject.toml
!MANIFEST.in

# Keep source code
!*.py
!*.ipynb
!*.md
!*.txt
!*.yml
!*.yaml
!*.json
!*.toml
!*.ini
!*.cfg
!*.conf

# Keep essential project files
!README.md
!requirements.txt
!model.py
!train.py
!constants.py

# Keep persistent data (but not track in git)
!datasets/imagenet/
!checkpoints/

# Everything else in checkpoints (old checkpoints)
checkpoints/*
!checkpoints/resnet50_epoch_[0-9]*.pth
!checkpoints/resnet50_epoch_[0-9][0-9].pth
!checkpoints/resnet50_epoch_[0-9][0-9][0-9].pth

# Keep latest checkpoint
!checkpoints/resnet50_latest.pth

# Keep best checkpoint
!checkpoints/resnet50_best.pth

datasets/*
